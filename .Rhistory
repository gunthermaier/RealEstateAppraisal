library(estimatr)
regrobust <- lm_robust(price ~ floorspace + roomscount + condn + balcexn)
summary(regrobust)
## from package lmtest
dwtest(reg)
hedonicdata <- dataframe
reg <- lm(price ~ floorspace + roomscount + condn + balcexn, data = hedonicdata)
summary(reg)
summary(hedonicdata)
sumtable(c("price", "floorspace", "roomscount", "condn", "balcexn"), data = hedonicdata)
reg <- lm(price ~ floorspace + roomscount + condn + balcexn, subset = price < 1000000)
summary(reg)
dflimit <- hedonicdata[hedonicdata$price < 1000000,]
st(c("price", "floorspace", "roomscount", "condn", "balcexn"),data=hedonicdata[hedonicdata$price < 1000000,])
reg <- lm(price_sqm ~ floorspace + roomscount + condn + balcexn, subset = price < 1000000)
summary(reg)
reg <- lm(ln_price ~ floorspace + roomscount + condn + balcexn, subset = price < 1000000)
#names(reg)
#length(reg$fitted.values)
#reg$coefficients
#names(summary(reg))
#summary(reg)$r.squared
#length(ln_price[price < 1000000])
#coefficients(reg) # model coefficients
#confint(reg, level=0.95) # CIs for model parameters
#fitted(reg) # predicted values
#residuals(reg) # residuals
#anova(reg) # anova table
#vcov(reg) # covariance matrix for model parameters
#influence(reg) # regression diagnostics
# diagnostic plots
par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
plot(reg)
par(mfrow=c(1,1)) # Change back to 1 x 1
#plot(model.frame(reg)$ln_price, reg$fitted.values)
#abline(a=0, b=1)
reg <- lm(ln_price ~ floorspace + roomscount + condn + balcexn, subset = price < 1000000)
resid.mean <- mean(residuals(reg))
resid.sd <- sd(residuals(reg))
hist(residuals(reg),breaks=20, probability=TRUE)
curve(dnorm(x, mean=resid.mean, sd=resid.sd),
col="darkblue", lwd=2, add=TRUE)
shapiro.test(residuals(reg))
reg <- lm(ln_price_sqm ~ floorspace + roomscount + condn + balcexn, subset = price < 1000000)
summary(reg)
reg <- lm(ln_price ~ ln_floorspace + roomscount + condn + balcexn, subset = price < 1000000)
summary(reg)
reg <- lm(ln_price_sqm ~ ln_floorspace + roomscount + condn + balcexn, subset = price < 1000000)
summary(reg)
freq(condn[price < 1000000])
hedonicdata$f_condn <- as.factor(hedonicdata$condn)
freq(hedonicdata$condn)
jcondn_1 <- ifelse(hedonicdata$condn == 1, 1, 0)
jcondn_2 <- ifelse(hedonicdata$condn == 2, 1, 0)
jcondn_3 <- ifelse(hedonicdata$condn == 3, 1, 0)
table(jcondn_1[price < 1000000], hedonicdata$f_condn[price < 1000000])
table(jcondn_2[price < 1000000], hedonicdata$f_condn[price < 1000000])
table(jcondn_3[price < 1000000], hedonicdata$f_condn[price < 1000000])
freq(hedonicdata$f_condn[price < 1000000])
attach(hedonicdata)
table(condn[price < 1000000], f_condn[price < 1000000])
reg <- lm(ln_price ~ floorspace + roomscount + f_condn + balcexn, subset = price < 1000000)
summary(reg)
anova(reg)
freq(hedonicdata$icondn_1)
reg <- lm(ln_price ~ floorspace + roomscount + icondn_1 + icondn_2 + icondn_3 + balcexn, subset = price < 1000000, data=hedonicdata)
summary(reg)
levels(f_condn) <- c("1", "23", "23")
attach(hedonicdata)
summary(lm(ln_price ~ floorspace + roomscount + f_condn + balcexn, subset = price < 1000000))
summary(lm(ln_price ~ floorspace + roomscount + f_condn + balcexn, subset = price < 1000000))
reg <- lm(ln_price ~ floorspace + roomscount + f_condn + balcexn, subset = price < 1000000)
skewness(resid(reg))
kurtosis(resid(reg))
bptest(reg)
reg <- lm(ln_price ~ ln_floorspace + roomscount + bathroomcount + f_condn + balcexn +
terraexn + basemexn + liftexn, subset = price < 1000000)
summary(reg)
reg <- lm(ln_price ~ ln_livingarea + roomscount + bathroomcount + f_condn + balcexn +
terraexn + basemexn + liftexn, subset = price < 1000000)
summary(reg)
reg <- lm(ln_price ~ ln_livingarea + roomscount + bathroomcount + f_condn + balcexn +
terraexn + basemexn + liftexn + bez02 + bez03 + bez04 + bez05 + bez06 + bez07 + bez08 + bez09 + bez10 + bez11 + bez12 + bez13 + bez14 + bez15 + bez16 + bez17 + bez18 + bez19 + bez20 +
bez21 + bez22 + bez23,
subset = price < 1000000)
summary(reg)
hedonicdata$plz <- as.factor(hedonicdata$plz)
reg <- lm(ln_price ~ ln_livingarea + roomscount + bathroomcount + f_condn + balcexn +
terraexn + basemexn + liftexn + plz,
subset = price < 1000000)
summary(reg)
reg <- lm(ln_price ~ ln_livingarea + roomscount + bathroomcount + f_condn + balcexn +
terraexn + basemexn + liftexn + distancecbd,
subset = price < 1000000)
summary(reg)
reg <- lm(ln_price ~ ln_livingarea + roomscount + bathroomcount + f_condn + balcexn +
terraexn + basemexn + liftexn + ln_distancecbd,
subset = price < 1000000)
summary(reg)
reg <- lm(ln_price ~ ln_livingarea + roomscount + bathroomcount + f_condn + balcexn +
terraexn + basemexn + liftexn + plz + ln_distancecbd,
subset = price < 1000000)
summary(reg)
library(spdep)
MISSING <- is.na(ln_price) |
is.na(ln_livingarea) |
is.na(roomscount) |
is.na(bathroomcount) |
is.na(f_condn) |
is.na(balcexn) |
is.na(terraexn) |
is.na(basemexn) |
is.na(liftexn) |
is.na(plz) |
is.na(ln_distancecbd)
hedonicdata_no_na <- subset(hedonicdata, subset=(!MISSING&(price < 1000000)))
levels(hedonicdata_no_na$f_condn) <- c("1", "23", "23")
hedonicdata_no_na$plz <- as.factor(hedonicdata_no_na$plz)
nrow(hedonicdata_no_na)
freq(hedonicdata_no_na$f_condn)
reg <- lm(ln_price ~ ln_livingarea + roomscount + bathroomcount + f_condn + balcexn +
terraexn + basemexn + liftexn + plz + ln_distancecbd, data=hedonicdata_no_na)
summary(reg)
xy <- cbind(hedonicdata_no_na$longitude_new, hedonicdata_no_na$latitude_new)
nm_knn <- knearneigh(xy, k=5, longlat=TRUE)
nm_nb <- knn2nb(nm_knn, row.names=hedonicdata_no_na$adsid, sym=TRUE)
nm_listw <- nb2listw(nm_nb, style="W")
#str(nm_listw)
testdata1 <- hedonicdata_no_na[, c("ln_livingarea", "roomscount", "bathroomcount", "icondn_23", "balcexn", "terraexn", "basemexn", "liftexn")]
testdata2 <- model.matrix(~ plz -1,hedonicdata_no_na)
testdata3 <- hedonicdata_no_na[, c("ln_distancecbd")]
testdata <- data.frame (1, testdata1, testdata2, testdata3)
testdata
nm_nb <- dnearneigh(xy, 0, 5.5, longlat=TRUE, row.names=hedonicdata_no_na$adsid)
summary(nm_nb)
add2nb <- function(nb, neighbors) {
#  n_nb <- length(nb)
new_asset_nr <- as.integer(length(nb)+1)
#  neighbors <- as.integer(neighbors)
neighbors <- sort(as.integer(neighbors))
for (i in neighbors){
list <- nb[[i]]
list <- sort(c(list, new_asset_nr))
nb[[i]] <- list
}
nb[[new_asset_nr]] <- neighbors
return(nb)
}
new_nb <- add2nb(nm_nb, c(21,18,2))
summary(new_nb)
nm_listw <- nb2listw(nm_nb, style="W")
summary(nm_listw)
library(Matrix)
m <- matrix(nm_listw)
m
solve(m)
w <- Matrix(data=nm_listw, nrow=1953, ncol=1953, sparse=TRUE)
str(nm_listw)
nm_listw$weights
w <- Matrix(data=nm_listw$weights, nrow=1953, ncol=1953, sparse=TRUE)
w <- Matrix(nm_listw$weights, nrow=1953, ncol=1953, sparse=TRUE)
w <- matrix(nm_listw$weights, nrow=1953, ncol=1953, sparse=TRUE)
w <- matrix(nm_listw$weights, nrow=1953, ncol=1953)
w
wsp <- sparseMatrix(w)
install.packages("birankr")
library(birankr)
w <- sparsematrix_from_edgelist(nm_listw)
View(w)
View(w)
solve(w)
dim(w)
listw2sparse <- function(nm_listw) {
n <- length(nm_listw$neighbours)
w <- Matrix(data=0, nrow=n, ncol=n, sparse=TRUE)
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
for (j in (1:nr)) {
wj = myrow[j]
w[i,wj] <- nm_listw$weights[[i]][j]
}
}
return(w)
}
w <- listw2sparse(nm_listw)
n <- length(nm_listw$neighbours)
n
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
nr
}
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
print(nr)
}
xy <- cbind(hedonicdata_no_na$longitude_new, hedonicdata_no_na$latitude_new)
nm_knn <- knearneigh(xy, k=5, longlat=TRUE)
nm_nb <- knn2nb(nm_knn, row.names=hedonicdata_no_na$adsid, sym=TRUE)
nm_listw <- nb2listw(nm_nb, style="W")
w <- listw2sparse(nm_listw)
w
View(nm_listw)
str(nm_listw)
w1 <- sparsematrix_from_edgelist(nm_listw)
View(w1)
View(w)
View(w1)
w1 <- sparsematrix_from_edgelist(nm_listw$weights)
View(w1)
library(devtools)
exceldata <- read_excel("my_data_spatial.xlsx")
ws()
setwd("C:/Users/gmaier/OneDrive - modul.ac.at/Desktop/Hedonic_Buch_Rmd")
exceldata <- read_excel("my_data_spatial.xlsx")
hedonicdata <- data.frame(exceldata)
setwd("C:/Users/gmaier/OneDrive - modul.ac.at/Desktop/RealEstateAppraisal")
use_data(hedonicdata)
use_r(data)
use_r("data")
View(hedonicdata)
View(dataframe)
library(RealEstateAppraisal)
library(RealEstateAppraisal)
?RealEstateAppraisal
??RealEstateAppraisal
devtools::load_all(".")
data("hedonicdata")
rm(hedonicdata)
data("hedonicdata")
rm(hedonicdata)
library(RealEstateAppraisal)
data("hedonicdata")
?hedonicdata
library(RealEstateAppraisal)
?hedonicdata
library(devtools)
use_r("appraisalsummary")
library(RealEstateAppraisal)
?compare.models
library(RealEstateAppraisal)
?appraisalsummary
use_r("listw2sparce")
knitr::opts_chunk$set(echo = TRUE)
listw2sparse <- function(nm_listw) {
n <- length(nm_listw$neighbours)
fields = 0
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
fields <- fields + nr
}
print (fields)
return(NULL)
w <- Matrix(data=0, nrow=n, ncol=n, sparse=TRUE)
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
for (j in (1:nr)) {
wj = myrow[j]
w[i,wj] <- nm_listw$weights[[i]][j]
}
}
return(w)
}
w <- listw2sparse(nm_listw)
listw2sparse <- function(nm_listw) {
n <- length(nm_listw$neighbours)
fields = 0
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
fields <- fields + nr
}
print (fields)
#  return(NULL)
w <- Matrix(data=0, nrow=n, ncol=n, sparse=TRUE)
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
for (j in (1:nr)) {
wj = myrow[j]
w[i,wj] <- nm_listw$weights[[i]][j]
}
}
return(w)
}
w <- listw2sparse(nm_listw)
listw2sparse <- function(nm_listw, force=FALSE) {
n <- length(nm_listw$neighbours)
fields = 0
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
fields <- fields + nr
}
if ((fields > 10000)&(!force)) {
print (c("Too many elements in input list: ", fields))
return(NULL)
}
w <- Matrix(data=0, nrow=n, ncol=n, sparse=TRUE)
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
for (j in (1:nr)) {
wj = myrow[j]
w[i,wj] <- nm_listw$weights[[i]][j]
}
}
return(w)
}
w <- listw2sparse(nm_listw)
w <- listw2sparse(nm_listw, TRUE)
listw2sparse <- function(nm_listw, force=FALSE) {
n <- length(nm_listw$neighbours)
fields = 0
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
fields <- fields + nr
}
if ((fields > 10000)&(!force)) {
print (c("Too many elements in input list: ", fields))
print ("Set force=TRUE to run anyways")
return(NULL)
}
w <- Matrix(data=0, nrow=n, ncol=n, sparse=TRUE)
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
for (j in (1:nr)) {
wj = myrow[j]
w[i,wj] <- nm_listw$weights[[i]][j]
}
}
return(w)
}
w <- listw2sparse(nm_listw)
listw2sparse <- function(nm_listw, force=FALSE) {
n <- length(nm_listw$neighbours)
fields = 0
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
fields <- fields + nr
}
if ((fields > 10000)&(!force)) {
print (c("Too many elements in input list: ", fields))
print ("Set 'force=TRUE' to run anyways")
return(NULL)
}
w <- Matrix(data=0, nrow=n, ncol=n, sparse=TRUE)
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
for (j in (1:nr)) {
wj = myrow[j]
w[i,wj] <- nm_listw$weights[[i]][j]
}
}
return(w)
}
w <- listw2sparse(nm_listw)
listw2sparse <- function(nm_listw, force=FALSE) {
n <- length(nm_listw$neighbours)
fields = 0
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
fields <- fields + nr
}
if ((fields > 10000)&(!force)) {
print (paste("Too many elements in input list: ", fields))
print ("Set 'force=TRUE' to run anyways")
return(NULL)
}
w <- Matrix(data=0, nrow=n, ncol=n, sparse=TRUE)
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
for (j in (1:nr)) {
wj = myrow[j]
w[i,wj] <- nm_listw$weights[[i]][j]
}
}
return(w)
}
w <- listw2sparse(nm_listw)
w <- listw2sparse(nm_listw, force=TRUE)
listw2sparse <- function(nm_listw, force=FALSE) {
n <- length(nm_listw$neighbours)
fields = 0
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
fields <- fields + nr
}
if ((fields > 50000)&(!force)) {
print (paste("Too many elements in input list: ", fields))
print ("Set 'force=TRUE' to run anyways")
return(NULL)
}
w <- Matrix(data=0, nrow=n, ncol=n, sparse=TRUE)
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
for (j in (1:nr)) {
wj = myrow[j]
w[i,wj] <- nm_listw$weights[[i]][j]
}
}
return(w)
}
w <- listw2sparse(nm_listw)
listw2sparse <- function(nm_listw, force=FALSE) {
n <- length(nm_listw$neighbours)
fields = 0
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
fields <- fields + nr
}
if ((fields > 50000)&(!force)) {
print (paste("Too many elements in input list: ", fields))
print ("It may take a while to run the function.")
print ("Set 'force=TRUE' to run anyways.")
return(NULL)
}
w <- Matrix(data=0, nrow=n, ncol=n, sparse=TRUE)
for (i in (1:n)) {
myrow <- nm_listw$neighbours[[i]]
nr <- length(myrow)
for (j in (1:nr)) {
wj = myrow[j]
w[i,wj] <- nm_listw$weights[[i]][j]
}
}
return(w)
}
library(RealEstateAppraisal)
?listw2sparse
library(RealEstateAppraisal)
?compare.models
?appraisalsummary
?listw2sparse
library(RealEstateAppraisal)
?listw2sparse
use_r("e_spatial")
library(RealEstateAppraisal)
?e_spatial
use_r("w_powers")
w
library(RealEstateAppraisal)
m <- w_powers(w)
m
dim(m)
use_r("w_inv")
library(RealEstateAppraisal)
?w_inv
?w_powers
library(installr)
install.packages("installr")
library(installr)
updateR()
library(devtools)
use_pkgdown()
build_site()
build_site()
build_site()
build_site()
library(devtools)
install_github("gunthermaier/RealEstateAppraisal")
?hedonicdata
data("hedonicdata")
help(package="RealEstateAppraisal")
?e_spatial
library(RealEstateAppraisal)
?e_spatial
detach("package:RealEstateAppraisal", unload = TRUE)
install.packages(c("rlang", "vctrs"))
install.packages(c("rlang", "vctrs"))
install.packages(c("rlang", "vctrs"))
remove.packages("RealEstateAppraisal")
library(devtools)
install_github("gunthermaier/RealEstateAppraisal")
library(RealEstateAppraisal)
?w_inv
install_github("gunthermaier/RealEstateAppraisal")
library(devtools)
install_github("gunthermaier/RealEstateAppraisal")
remove.packages("RealEstateAppraisal")
install_github("gunthermaier/RealEstateAppraisal")
library(RealEstateAppraisal)
library(RealEstateAppraisal)
data(hedonicdata)
View(hedonicdata)
hedonicdata[1:10,1:9]
use_r("model_quality")
library(RealEstateAppraisal)
library(RealEstateAppraisal)
reg <- lm(price ~ floorspace + roomscount + condn + balcexn)
attach(hedonicdata)
reg <- lm(price ~ floorspace + roomscount + condn + balcexn)
summary(reg)
model_quality(reg)
library(RealEstateAppraisal)
attach(hedonicdata)
reg <- lm(price ~ floorspace + roomscount + condn + balcexn)
summary(reg)
model_quality(reg)
